# -*- coding: utf-8 -*-
"""Ratios with Pivot for Irfan Bhi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QC3O-4CR25rK1lTjWpDSPfHE9tsYuEad
"""

import pandas as pd
import numpy as np
import io

from google.colab import files

uploaded = files.upload()

file_name = "FinData.xlsx"

GL = pd.read_excel('FinData.xlsx', sheet_name='GL')
COA = pd.read_excel('FinData.xlsx', sheet_name='COA')
Calendar = pd.read_excel('FinData.xlsx', 'Calendar')
Territory = pd.read_excel('FinData.xlsx', 'Territory')

# # Convert combinations into a DataFrame
all_quarters = Calendar[['Year', 'Quarter']].drop_duplicates()

"""# New Section"""

GL_Master = pd.merge(GL, COA, on='Account_key', how='left').merge(Calendar, on='Date', how='left').merge(Territory, on='Territory_key', how='left')

pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)
pd.set_option('display.max_colwidth', None)

Country_by = ('France')
column_by = ('Year')
rows_by = ('Quarter')
rows_by_bs = (column_by, rows_by)

Sales = GL_Master[(GL_Master["SubClass"] == "Sales") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns=column_by, aggfunc='sum')
Sales

Gross_Profit = GL_Master[(GL_Master["Class"] == "Trading account") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
Gross_Profit

EBITDA = GL_Master[(GL_Master["SubClass"].isin(['Sales', 'Cost of Sales', 'Operating Expenses'])) & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
EBITDA

Operating_Profit = GL_Master[(GL_Master["Class"].isin(['Trading account', 'Operating account'])) & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
Operating_Profit

PBIT = GL_Master[(GL_Master["Class"].isin(['Trading account', 'Operating account', 'Non-operating'])) & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
PBIT

Net_Profit = GL_Master[(GL_Master["Report"] == "Profit and Loss") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
Net_Profit

Cost_of_Sales = GL_Master[(GL_Master["SubClass"].isin(['Cost of Sales'])) & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
Cost_of_Sales

Interest_Expense = GL_Master[(GL_Master["SubClass"] == 'Interest Expense') & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by, columns= column_by, aggfunc='sum')
Interest_Expense

Gross_Margin = Gross_Profit / Sales * 100
Gross_Margin

Assets = GL_Master[(GL_Master["Class"] == "Assets") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by_bs, aggfunc='sum').cumsum(axis=0).reset_index().pivot(index=rows_by, columns=column_by, values='Amount')
Assets

Current_Assets = GL_Master[(GL_Master["SubClass2"] == "Current Assets") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by_bs, aggfunc='sum').cumsum(axis=0).reset_index().pivot(index=rows_by, columns=column_by, values='Amount')
Current_Assets

Non_Current_Assets = GL_Master[(GL_Master["SubClass2"] == "Non-Current Assets") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by_bs, aggfunc='sum').cumsum(axis=0).reset_index().pivot(index=rows_by, columns=column_by, values='Amount')
Non_Current_Assets

Current_Liabilities = GL_Master[(GL_Master["SubClass2"] == "Current Liabilities") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=rows_by_bs, aggfunc='sum').cumsum(axis=0).reset_index().pivot(index=rows_by, columns=column_by, values='Amount')
Current_Liabilities

Current_Liabilities.abs()

# # Convert combinations into a DataFrame
all_quarters = Calendar[['Year', 'Quarter']].drop_duplicates()

# Prepare Non_Current_Liabilities data
Non_Current_Liabilities = GL_Master[(GL_Master["SubClass2"] == "Long Term Liabilities") & (GL_Master["Country"] == Country_by)]\
                                    .pivot_table(values='Amount', index=['Year', 'Quarter'], aggfunc='sum')\
                                    .reset_index()

# Merge with all_quarters
# Fill missing values with 0 and calculate cumulative sum
Non_Current_Liabilities = pd.merge(all_quarters, Non_Current_Liabilities, how='left', on=['Year', 'Quarter']).fillna(0)

Non_Current_Liabilities['CumulativeSum'] = Non_Current_Liabilities['Amount'].cumsum()

# Pivot for final format
Non_Current_Liabilities = Non_Current_Liabilities.pivot(index='Quarter', columns='Year', values='CumulativeSum')
Non_Current_Liabilities

Equity = GL_Master[(GL_Master["SubClass"] == "Owners Equity") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=('Year', 'Quarter'), aggfunc='sum').cumsum(axis=0).reset_index().pivot(index='Quarter', columns='Year', values='Amount')
Equity

Equity / Non_Current_Liabilities

Asset_turnover = Sales / Assets
Asset_turnover

Inventory = GL_Master[(GL_Master["Account"] == "Inventory") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=('Year', 'Quarter'), aggfunc='sum').cumsum(axis=0).reset_index().pivot(index='Quarter', columns='Year', values='Amount')
Inventory

Trade_Receivables = GL_Master[(GL_Master["SubAccount"] == "Trade Receivables") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=('Year', 'Quarter'), aggfunc='sum').cumsum(axis=0).reset_index().pivot(index='Quarter', columns='Year', values='Amount')
Trade_Receivables

Trade_Payables = GL_Master[(GL_Master["SubAccount"] == "Trade Payables") & (GL_Master["Country"] == Country_by)].pivot_table(values='Amount', index=('Year', 'Quarter'), aggfunc='sum').cumsum(axis=0).reset_index().pivot(index='Quarter', columns='Year', values='Amount')
Trade_Payables

Current_Ratio = Current_Assets / Current_Liabilities
Current_Ratio

Current_Ratio.abs()

Quick_Ratio = (Current_Assets - Inventory) / Current_Liabilities
Quick_Ratio.abs()

